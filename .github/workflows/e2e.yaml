name: E2E

on:
  push:
    branches:
      - main
  pull_request:

env:
  KIND_VERSION: 'v0.29.0'
  KIND_NODE_IMAGE: 'kindest/node:v1.33.1'
  PYTHON_VERSION: '3.9'

jobs:
  e2e-skopeo:
    name: E2E using Skopeo
    runs-on: ubuntu-24.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
    - name: Install Skopeo
      run: |
        sudo apt-get update && sudo apt-get install skopeo
        skopeo --version
    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Install Poetry
      run: |
        pipx install poetry
    - name: Install-only specific KinD version (so it's up-to-date)
      uses: helm/kind-action@v1
      with:
        version: ${{ env.KIND_VERSION }}
        node_image: ${{ env.KIND_NODE_IMAGE }}
        install_only: true
    - name: Install dependencies
      run: |
        make install
    - name: Run E2E tests
      run: |
        make test-e2e-skopeo
    - name: Continue E2E by deploying KServe
      run: |
        kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.16.1/cert-manager.yaml
        e2e/repeat.sh kubectl apply --server-side -f https://github.com/kserve/kserve/releases/download/v0.14.0/kserve.yaml
        e2e/repeat.sh kubectl apply --server-side -f https://github.com/kserve/kserve/releases/download/v0.14.0/kserve-cluster-resources.yaml
        kubectl patch configmap/inferenceservice-config -n kserve --type=strategic -p '{"data": {"deploy": "{\"defaultDeploymentMode\": \"RawDeployment\"}"}}'
        e2e/enable-modelcar.sh
    - name: Run OLOT tutorial of README, and load image in KinD for amd64
      run: | 
        IMAGE_DIR=download
        OCI_REGISTRY_SOURCE=quay.io/mmortari/hello-world-wait:latest
        OCI_REGISTRY_DESTINATION=localhost:5001/nstestorg/modelcar
        rm -rf $IMAGE_DIR
        skopeo copy --multi-arch all docker://${OCI_REGISTRY_SOURCE} oci:${IMAGE_DIR}:latest
        poetry run olot $IMAGE_DIR --modelcard tests/data/sample-model/README.md tests/data/sample-model/model.joblib
        # copy modelcar from oci-layout to the local docker registry
        skopeo copy --tls-verify=false --multi-arch all oci:${IMAGE_DIR}:latest docker://${OCI_REGISTRY_DESTINATION}
        skopeo inspect --tls-verify=false --raw docker://localhost:5001/nstestorg/modelcar | jq .
        # make sure the annotation is present
        digest=$(skopeo inspect --tls-verify=false --raw docker://localhost:5001/nstestorg/modelcar | jq -r '.manifests[] | select(.platform.architecture == "amd64") | .digest')
        skopeo inspect --tls-verify=false docker://${OCI_REGISTRY_DESTINATION}@$digest --raw | jq .
        skopeo inspect --tls-verify=false docker://${OCI_REGISTRY_DESTINATION}@$digest --raw | jq -e '.layers | last | has("annotations")'
        # tag amd64 as modelcar:v1 and load image in KinD cluster
        skopeo copy --src-tls-verify=false docker://localhost:5001/nstestorg/modelcar@$digest docker-daemon:localhost:5001/nstestorg/modelcar:v1
        kind load docker-image -n "olot-e2e" "localhost:5001/nstestorg/modelcar:v1"
    - name: Apply Isvc using Modelcar # since the enable modelcar restart controller pod, better guard the kubectl apply
      run: |
        e2e/repeat.sh kubectl apply -f e2e/isvc-modelcar.yaml
        kubectl wait --for=condition=Ready isvc/my-inference-service --timeout=240s
    - name: Basic testing of Isvc that has Modelcar
      run: |
        echo "Starting port-forward..."
        kubectl port-forward svc/my-inference-service-predictor 8080:80 &
        PID=$!
        sleep 2
        echo "I have launched port-forward in background with: $PID."
        echo "Check that OIP return the expected name"
        curl -s http://localhost:8080/v2/models | jq -e '.models | index("my-inference-service") != null'
        echo "Check that OIP produces an Inference Prediction"
        curl -s -H "Content-Type: application/json" -d @e2e/data/input0.json http://localhost:8080/v2/models/my-inference-service/infer | jq
        curl -s -H "Content-Type: application/json" -d @e2e/data/input1.json http://localhost:8080/v2/models/my-inference-service/infer | jq
        curl -s -H "Content-Type: application/json" -d @e2e/data/input4.json http://localhost:8080/v2/models/my-inference-service/infer | jq
    - name: Run OLOT flow using busybox, and load image in KinD for amd64
      run: | 
        IMAGE_DIR=download
        OCI_REGISTRY_SOURCE=docker.io/library/busybox:latest
        OCI_REGISTRY_DESTINATION=localhost:5001/nstestorg/modelcar2
        rm -rf $IMAGE_DIR
        skopeo copy --multi-arch all docker://${OCI_REGISTRY_SOURCE} oci:${IMAGE_DIR}:latest
        poetry run olot $IMAGE_DIR --modelcard tests/data/sample-model/README.md tests/data/sample-model/model.joblib
        skopeo copy --tls-verify=false --multi-arch all oci:${IMAGE_DIR}:latest docker://${OCI_REGISTRY_DESTINATION}
        skopeo inspect --tls-verify=false --raw docker://localhost:5001/nstestorg/modelcar | jq .
        digest=$(skopeo inspect --tls-verify=false --raw docker://localhost:5001/nstestorg/modelcar2 | jq -r '.manifests[] | select(.platform.architecture == "amd64") | .digest')
        skopeo inspect --tls-verify=false docker://${OCI_REGISTRY_DESTINATION}@$digest --raw | jq -e '.layers | last | has("annotations")'
        # tag amd64 as modelcar2:v2 and load image in KinD cluster
        skopeo copy --src-tls-verify=false docker://localhost:5001/nstestorg/modelcar2@$digest docker-daemon:localhost:5001/nstestorg/modelcar2:v2
        kind load docker-image -n "olot-e2e" "localhost:5001/nstestorg/modelcar2:v2"
    - name: Apply Isvc using Modelcar # change Isvc and await for it to be ready again.
      run: |
        kubectl patch isvc/my-inference-service \
          --type='json' \
          -p='[{"op": "replace", "path": "/spec/predictor/model/storageUri", "value": "oci://localhost:5001/nstestorg/modelcar2:v2"}]'
        kubectl wait --for=condition=Ready isvc/my-inference-service --timeout=240s
        kubectl describe isvc/my-inference-service
    - name: Basic testing of Isvc that has Modelcar
      run: |
        echo "Starting port-forward..."
        kubectl port-forward svc/my-inference-service-predictor 8080:80 &
        PID=$!
        sleep 2
        echo "I have launched port-forward in background with: $PID."
        echo "Check that OIP return the expected name"
        curl -s http://localhost:8080/v2/models | jq -e '.models | index("my-inference-service") != null'
        echo "Check that OIP produces an Inference Prediction"
        curl -s -H "Content-Type: application/json" -d @e2e/data/input0.json http://localhost:8080/v2/models/my-inference-service/infer | jq
        curl -s -H "Content-Type: application/json" -d @e2e/data/input1.json http://localhost:8080/v2/models/my-inference-service/infer | jq
        curl -s -H "Content-Type: application/json" -d @e2e/data/input4.json http://localhost:8080/v2/models/my-inference-service/infer | jq
  e2e-skopeo-and-add-modelpack:
    name: E2E using Skopeo and add-modelpack flag
    needs: e2e-skopeo # run this test after the e2e-skopeo test has completed
    # This test is to ensure that the add-modelpack flag is working as expected.
    # - add a ModelPack manifest to the multi-archoci-layout, and then load the image in KinD.
    # - check again that applying an Isvc using Modelcar is unaffected by testing that the Isvc is working as expected.
    runs-on: ubuntu-24.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
    - name: Install Skopeo
      run: |
        sudo apt-get update && sudo apt-get install skopeo
        skopeo --version
    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Install Poetry
      run: |
        pipx install poetry
    - name: Install-only specific KinD version (so it's up-to-date)
      uses: helm/kind-action@v1
      with:
        version: ${{ env.KIND_VERSION }}
        node_image: ${{ env.KIND_NODE_IMAGE }}
        install_only: true
    - name: Install dependencies
      run: |
        make install
    - name: Create and install prerequisites in KinD cluster (but skip python E2E tests here)
      run: |
        make deploy-kind-cluster deploy-local-registry
    - name: Deploy KServe
      run: |
        kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.16.1/cert-manager.yaml
        e2e/repeat.sh kubectl apply --server-side -f https://github.com/kserve/kserve/releases/download/v0.14.0/kserve.yaml
        e2e/repeat.sh kubectl apply --server-side -f https://github.com/kserve/kserve/releases/download/v0.14.0/kserve-cluster-resources.yaml
        kubectl patch configmap/inferenceservice-config -n kserve --type=strategic -p '{"data": {"deploy": "{\"defaultDeploymentMode\": \"RawDeployment\"}"}}'
        e2e/enable-modelcar.sh
    - name: Run OLOT tutorial of README by adding a ModelPack manifest, and load image in KinD for amd64
      run: | 
        IMAGE_DIR=download
        OCI_REGISTRY_SOURCE=quay.io/mmortari/hello-world-wait:latest
        OCI_REGISTRY_DESTINATION=localhost:5001/nstestorg/modelcar
        rm -rf $IMAGE_DIR
        skopeo copy --multi-arch all docker://${OCI_REGISTRY_SOURCE} oci:${IMAGE_DIR}:latest
        poetry run olot $IMAGE_DIR --add-modelpack --modelcard tests/data/sample-model/README.md tests/data/sample-model/model.joblib
        # copy modelcar from oci-layout to the local docker registry
        skopeo copy --tls-verify=false --multi-arch all oci:${IMAGE_DIR}:latest docker://${OCI_REGISTRY_DESTINATION}
        skopeo inspect --tls-verify=false --raw docker://localhost:5001/nstestorg/modelcar | jq .
        # make sure the annotation is present
        skopeo inspect --tls-verify=false --raw docker://localhost:5001/nstestorg/modelcar | jq -e '.manifests | any(.annotations."io.opendatahub.author" == "olot" and .annotations."io.opendatahub.modelcar.manifest.type" == "modelpack")'
        digest=$(skopeo inspect --tls-verify=false --raw docker://localhost:5001/nstestorg/modelcar | jq -r '.manifests[] | select(.platform.architecture == "amd64") | .digest')
        skopeo inspect --tls-verify=false docker://${OCI_REGISTRY_DESTINATION}@$digest --raw | jq -e '.layers | last | has("annotations")'
        # tag amd64 as modelcar:v1 and load image in KinD cluster
        skopeo copy --src-tls-verify=false docker://localhost:5001/nstestorg/modelcar@$digest docker-daemon:localhost:5001/nstestorg/modelcar:v1
        kind load docker-image -n "olot-e2e" "localhost:5001/nstestorg/modelcar:v1"
    - name: Apply Isvc using Modelcar # since the enable modelcar restart controller pod, better guard the kubectl apply
      run: |
        e2e/repeat.sh kubectl apply -f e2e/isvc-modelcar.yaml
        kubectl wait --for=condition=Ready isvc/my-inference-service --timeout=240s
    - name: Basic testing of Isvc that has Modelcar
      run: |
        echo "Starting port-forward..."
        kubectl port-forward svc/my-inference-service-predictor 8080:80 &
        PID=$!
        sleep 2
        echo "I have launched port-forward in background with: $PID."
        echo "Check that OIP return the expected name"
        curl -s http://localhost:8080/v2/models | jq -e '.models | index("my-inference-service") != null'
        echo "Check that OIP produces an Inference Prediction"
        curl -s -H "Content-Type: application/json" -d @e2e/data/input0.json http://localhost:8080/v2/models/my-inference-service/infer | jq
        curl -s -H "Content-Type: application/json" -d @e2e/data/input1.json http://localhost:8080/v2/models/my-inference-service/infer | jq
        curl -s -H "Content-Type: application/json" -d @e2e/data/input4.json http://localhost:8080/v2/models/my-inference-service/infer | jq
  e2e-oras:
    name: E2E using Oras CP
    runs-on: ubuntu-24.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
    - name: Install oras
      uses: oras-project/setup-oras@v1
    - run: oras version
    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Install Poetry
      run: |
        pipx install poetry
    - name: Install-only specific KinD version (so it's up-to-date)
      uses: helm/kind-action@v1
      with:
        version: ${{ env.KIND_VERSION }}
        node_image: ${{ env.KIND_NODE_IMAGE }}
        install_only: true
    - name: Install dependencies
      run: |
        make install
    - name: Run E2E tests
      run: |
        make test-e2e-oras
  e2e-remove-originals-cli:
    name: E2E test remove-originals scenario from CLI
    runs-on: ubuntu-24.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
    - name: Install Skopeo
      run: |
        sudo apt-get update && sudo apt-get install skopeo
        skopeo --version
    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Install Poetry
      run: |
        pipx install poetry
    - name: Install-only specific KinD version (so it's up-to-date)
      uses: helm/kind-action@v1
      with:
        version: ${{ env.KIND_VERSION }}
        node_image: ${{ env.KIND_NODE_IMAGE }}
        install_only: true
    - name: Install dependencies
      run: |
        make install
    - name: Run OLOT tutorial of README, and load image in KinD for amd64
      run: | 
        IMAGE_DIR=download
        OCI_REGISTRY_SOURCE=quay.io/mmortari/hello-world-wait:latest
        OCI_REGISTRY_DESTINATION=localhost:5001/nstestorg/modelcar
        rm -rf $IMAGE_DIR
        skopeo copy --multi-arch all docker://${OCI_REGISTRY_SOURCE} oci:${IMAGE_DIR}:latest

        tmp_dir=$(mktemp -d)
        echo "*** no-flag scenario using $tmp_dir"
        cp tests/data/sample-model/README.md "$tmp_dir"
        cp tests/data/sample-model/model.joblib "$tmp_dir"
        ls -la "$tmp_dir"
        poetry run olot $IMAGE_DIR --modelcard "$tmp_dir"/README.md "$tmp_dir"/model.joblib
        fc=$(find "$tmp_dir" -maxdepth 1 -type f | wc -l)
        if [ "$fc" -ne 2 ]; then
          echo "Expected all 2 files remaining, found:"
          find "$tmp_dir" -maxdepth 1 -type f
          exit 1
        fi
        echo "resulting in:"
        ls -la "$tmp_dir"

        tmp_dir=$(mktemp -d)
        echo "*** --remove-originals scenario using $tmp_dir"
        cp tests/data/sample-model/README.md "$tmp_dir"
        cp tests/data/sample-model/model.joblib "$tmp_dir"
        ls -la "$tmp_dir"
        poetry run olot $IMAGE_DIR --remove-originals --modelcard "$tmp_dir"/README.md "$tmp_dir"/model.joblib
        fc=$(find "$tmp_dir" -maxdepth 1 -type f | wc -l)
        if [ "$fc" -ne 1 ]; then
          echo "Expected only Model CarD remaining, found:"
          find "$tmp_dir" -maxdepth 1 -type f
          exit 1
        fi
        echo "resulting in:"
        ls -la "$tmp_dir"

        tmp_dir=$(mktemp -d)
        echo "*** --remove-originals=all scenario using $tmp_dir"
        cp tests/data/sample-model/README.md "$tmp_dir"
        cp tests/data/sample-model/model.joblib "$tmp_dir"
        ls -la "$tmp_dir"
        poetry run olot $IMAGE_DIR --remove-originals all --modelcard "$tmp_dir"/README.md "$tmp_dir"/model.joblib
        fc=$(find "$tmp_dir" -maxdepth 1 -type f | wc -l)
        if [ "$fc" -ne 0 ]; then
          echo "Expected none file remaining, found:"
          find "$tmp_dir" -maxdepth 1 -type f
          exit 1
        fi
        echo "resulting in:"
        ls -la "$tmp_dir"

  e2e-check-embedded-oci-layout:
    name: E2E test embedded oci-layout
    runs-on: ubuntu-24.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: "3.9"
    - name: Install Poetry
      run: |
        pipx install poetry
    - name: Run the builda and install the python wheel
      run: |
        make build
        pipx install dist/olot-*.whl
    - name: Check an embedded oci-layout is created as expected
      run: |
        python -c "from olot.embedded_oci_layout import embedded_oci_layout; embedded_oci_layout('/tmp/embedded_oci_layout')"
        find /tmp/embedded_oci_layout -type f -exec ls -la {} \;
        # Compare the contents of olot/embedded_oci_layout and /tmp/embedded_oci_layout
        diff -r olot/embedded_oci_layout /tmp/embedded_oci_layout
